{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\juhku\\\\Programs\\\\Udemy_kurssit\\\\React\\\\coltsteele_react\\\\react-lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\juhku\\\\Programs\\\\Udemy_kurssit\\\\React\\\\coltsteele_react\\\\react-lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\juhku\\\\Programs\\\\Udemy_kurssit\\\\React\\\\coltsteele_react\\\\react-lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\juhku\\\\Programs\\\\Udemy_kurssit\\\\React\\\\coltsteele_react\\\\react-lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\juhku\\\\Programs\\\\Udemy_kurssit\\\\React\\\\coltsteele_react\\\\react-lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\juhku\\\\Programs\\\\Udemy_kurssit\\\\React\\\\coltsteele_react\\\\react-lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\juhku\\\\Programs\\\\Udemy_kurssit\\\\React\\\\coltsteele_react\\\\react-lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\juhku\\\\Programs\\\\Udemy_kurssit\\\\React\\\\coltsteele_react\\\\react-lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\juhku\\\\Programs\\\\Udemy_kurssit\\\\React\\\\coltsteele_react\\\\react-lights-out\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\r\n *\r\n * Properties:\r\n *\r\n * - nrows: number of rows of board\r\n * - ncols: number of cols of board\r\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\r\n *\r\n * State:\r\n *\r\n * - hasWon: boolean, true when board is all off\r\n * - board: array-of-arrays of true/false\r\n *\r\n *    For this board:\r\n *       .  .  .\r\n *       O  O  .     (where . is off, and O is on)\r\n *       .  .  .\r\n *\r\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\r\n *\r\n *  This should render an HTML table of individual <Cell /> components.\r\n *\r\n *  This doesn't handle any clicks --- clicks are on individual cells\r\n *\r\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.createBoard = _this.createBoard.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    _this.flipCellsAround = _this.flipCellsAround.bind(_assertThisInitialized(_assertThisInitialized(_this))); // TODO: set initial state\n\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var _this2 = this;\n\n      // TODO: create array-of-arrays of true/false values\n      var rndVal; //Create an array with undefined values\n\n      var board = Array.from(new Array(this.props.ncols), function (x) {\n        return new Array(_this2.props.nrows);\n      }); //Populaing the array with true/false values\n\n      for (var i = 0; i < board.length; i++) {\n        for (var j = 0; j < board[0].length; j++) {\n          rndVal = Math.random();\n\n          if (rndVal > this.props.chanceLightStartsOn) {\n            board[i][j] = true;\n          } else {\n            board[i][j] = false;\n          }\n        }\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      console.log(coord);\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      var curState = _objectSpread({}, this.state);\n\n      flipCell(y, x);\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          curState.board[y][x] = !curState.board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n\n\n      this.setState({\n        board: curState.board\n      }); // win when every cell is turned off\n      // TODO: determine is the game has been won\n      //this.setState({board, hasWon});\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"table\", {\n        className: \"Board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, this.state.board.map(function (i, y) {\n        return React.createElement(\"tr\", {\n          key: y,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, i.map(function (j, x) {\n          return React.createElement(Cell, {\n            key: \"\".concat(y, \"-\").concat(x),\n            coord: \"\".concat(y, \"-\").concat(x),\n            flipCellsAround: _this3.flipCellsAround,\n            isLit: _this3.state.board[y][x],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 108\n            },\n            __self: this\n          });\n        }));\n      }))); // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  ncols: 5,\n  nrows: 5,\n  chanceLightStartsOn: 0.5\n};\nexport default Board;","map":{"version":3,"sources":["C:/Users/juhku/Programs/Udemy_kurssit/React/coltsteele_react/react-lights-out/src/Board.js"],"names":["React","Component","Cell","Board","props","createBoard","bind","state","hasWon","board","flipCellsAround","rndVal","Array","from","ncols","x","nrows","i","length","j","Math","random","chanceLightStartsOn","coord","console","log","split","map","Number","y","curState","flipCell","setState","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport './Board.css';\r\n\r\n\r\n/** Game board of Lights out.\r\n *\r\n * Properties:\r\n *\r\n * - nrows: number of rows of board\r\n * - ncols: number of cols of board\r\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\r\n *\r\n * State:\r\n *\r\n * - hasWon: boolean, true when board is all off\r\n * - board: array-of-arrays of true/false\r\n *\r\n *    For this board:\r\n *       .  .  .\r\n *       O  O  .     (where . is off, and O is on)\r\n *       .  .  .\r\n *\r\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\r\n *\r\n *  This should render an HTML table of individual <Cell /> components.\r\n *\r\n *  This doesn't handle any clicks --- clicks are on individual cells\r\n *\r\n **/\r\n\r\nclass Board extends Component {\r\n  static defaultProps = {\r\n    ncols: 5,\r\n    nrows: 5,\r\n    chanceLightStartsOn: 0.5\r\n  }\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.createBoard = this.createBoard.bind(this);\r\n    this.state = {hasWon: false, board: this.createBoard()};\r\n    this.flipCellsAround = this.flipCellsAround.bind(this);\r\n    // TODO: set initial state\r\n  }\r\n\r\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\r\n\r\n  createBoard() {\r\n    // TODO: create array-of-arrays of true/false values\r\n    let rndVal;\r\n    //Create an array with undefined values\r\n    let board = Array.from(new Array(this.props.ncols), x => new Array(this.props.nrows));\r\n    //Populaing the array with true/false values\r\n    for(let i = 0; i < board.length; i++){\r\n      for(let j = 0; j < board[0].length; j++){\r\n        rndVal = Math.random();\r\n        if(rndVal > this.props.chanceLightStartsOn){\r\n          board[i][j] = true;\r\n        }\r\n        else{\r\n          board[i][j] = false;\r\n        }\r\n      }\r\n    }\r\n    return board;\r\n  }\r\n\r\n  /** handle changing a cell: update board & determine if winner */\r\n\r\n  flipCellsAround(coord) {\r\n    console.log(coord);\r\n    let {ncols, nrows} = this.props;\r\n    let board = this.state.board;\r\n    let [y, x] = coord.split(\"-\").map(Number);\r\n    \r\n    let curState = {...this.state};\r\n    flipCell(y, x);\r\n     function flipCell(y, x) {\r\n      // if this coord is actually on board, flip it\r\n\r\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\r\n        curState.board[y][x] = !curState.board[y][x];\r\n      }\r\n    }\r\n\r\n    // TODO: flip this cell and the cells around it\r\n\r\n    this.setState({\r\n      board: curState.board\r\n    })\r\n    // win when every cell is turned off\r\n    // TODO: determine is the game has been won\r\n\r\n    //this.setState({board, hasWon});\r\n  }\r\n\r\n\r\n  /** Render game board or winning message. */\r\n\r\n  render() {\r\n    return(\r\n      <table className=\"Board\">\r\n        <tbody>\r\n          {this.state.board.map((i, y) =>\r\n            <tr key={y}>\r\n              {i.map((j, x) => \r\n                  <Cell \r\n                    key={`${y}-${x}`}\r\n                    coord={`${y}-${x}`}\r\n                    flipCellsAround={this.flipCellsAround}\r\n                    isLit={this.state.board[y][x]}\r\n                  />)} \r\n            </tr>)\r\n          }\r\n        </tbody>\r\n      </table>\r\n    )\r\n    // if the game is won, just show a winning msg & render nothing else\r\n\r\n    // TODO\r\n\r\n    // make table board\r\n\r\n    // TODO\r\n  }\r\n}\r\n\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}