{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\juhku\\\\Programs\\\\Udemy_kurssit\\\\React\\\\coltsteele_react\\\\react-lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\juhku\\\\Programs\\\\Udemy_kurssit\\\\React\\\\coltsteele_react\\\\react-lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\juhku\\\\Programs\\\\Udemy_kurssit\\\\React\\\\coltsteele_react\\\\react-lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\juhku\\\\Programs\\\\Udemy_kurssit\\\\React\\\\coltsteele_react\\\\react-lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\juhku\\\\Programs\\\\Udemy_kurssit\\\\React\\\\coltsteele_react\\\\react-lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\juhku\\\\Programs\\\\Udemy_kurssit\\\\React\\\\coltsteele_react\\\\react-lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\juhku\\\\Programs\\\\Udemy_kurssit\\\\React\\\\coltsteele_react\\\\react-lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\juhku\\\\Programs\\\\Udemy_kurssit\\\\React\\\\coltsteele_react\\\\react-lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\juhku\\\\Programs\\\\Udemy_kurssit\\\\React\\\\coltsteele_react\\\\react-lights-out\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\r\n *\r\n * Properties:\r\n *\r\n * - nrows: number of rows of board\r\n * - ncols: number of cols of board\r\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\r\n *\r\n * State:\r\n *\r\n * - hasWon: boolean, true when board is all off\r\n * - board: array-of-arrays of true/false\r\n *\r\n *    For this board:\r\n *       .  .  .\r\n *       O  O  .     (where . is off, and O is on)\r\n *       .  .  .\r\n *\r\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\r\n *\r\n *  This should render an HTML table of individual <Cell /> components.\r\n *\r\n *  This doesn't handle any clicks --- clicks are on individual cells\r\n *\r\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.createBoard = _this.createBoard.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    _this.flipCellsAround = _this.flipCellsAround.bind(_assertThisInitialized(_assertThisInitialized(_this))); // TODO: set initial state\n\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var _this2 = this;\n\n      var board2 = this.props.board; // TODO: create array-of-arrays of true/false values\n\n      var board = [this.props.ncols];\n      board.map(function (i) {\n        return board[i] = [_this2.props.nrows];\n      });\n      console.log(board);\n      return board2;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n\n\n      var curState = _objectSpread({}, this.state);\n\n      this.setState({}); // win when every cell is turned off\n      // TODO: determine is the game has been won\n      //this.setState({board, hasWon});\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"table\", {\n        className: \"Board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, this.state.board.map(function (i, y) {\n        return React.createElement(\"tr\", {\n          key: y,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, i.map(function (j, x) {\n          return React.createElement(Cell, {\n            key: \"\".concat(y, \"-\").concat(x),\n            flipCellsAround: _this3.flipCellsAround,\n            isLit: _this3.state.board[y][x],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102\n            },\n            __self: this\n          });\n        }));\n      }))); // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  board: [[false, false, false], [true, true, false], [false, false, false]],\n  ncols: 5,\n  nrows: 5,\n  chanceLightStartsOn: 0.5\n};\nexport default Board;","map":{"version":3,"sources":["C:/Users/juhku/Programs/Udemy_kurssit/React/coltsteele_react/react-lights-out/src/Board.js"],"names":["React","Component","Cell","Board","props","createBoard","bind","state","hasWon","board","flipCellsAround","board2","ncols","map","i","nrows","console","log","coord","split","Number","y","x","flipCell","curState","setState","j","defaultProps","chanceLightStartsOn"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport './Board.css';\r\n\r\n\r\n/** Game board of Lights out.\r\n *\r\n * Properties:\r\n *\r\n * - nrows: number of rows of board\r\n * - ncols: number of cols of board\r\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\r\n *\r\n * State:\r\n *\r\n * - hasWon: boolean, true when board is all off\r\n * - board: array-of-arrays of true/false\r\n *\r\n *    For this board:\r\n *       .  .  .\r\n *       O  O  .     (where . is off, and O is on)\r\n *       .  .  .\r\n *\r\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\r\n *\r\n *  This should render an HTML table of individual <Cell /> components.\r\n *\r\n *  This doesn't handle any clicks --- clicks are on individual cells\r\n *\r\n **/\r\n\r\nclass Board extends Component {\r\n  static defaultProps = {\r\n    board: [\r\n      [false, false, false],\r\n      [true, true, false],\r\n      [false, false, false]\r\n    ],\r\n    ncols: 5,\r\n    nrows: 5,\r\n    chanceLightStartsOn: 0.5\r\n  }\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.createBoard = this.createBoard.bind(this);\r\n    this.state = {hasWon: false, board: this.createBoard()};\r\n    this.flipCellsAround = this.flipCellsAround.bind(this);\r\n    // TODO: set initial state\r\n  }\r\n\r\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\r\n\r\n  createBoard() {\r\n    let board2 = this.props.board;\r\n    // TODO: create array-of-arrays of true/false values\r\n    let board = [this.props.ncols];\r\n    board.map(i => board[i] = [this.props.nrows]);\r\n    console.log(board);\r\n\r\n    return board2;\r\n  }\r\n\r\n  /** handle changing a cell: update board & determine if winner */\r\n\r\n  flipCellsAround(coord) {\r\n    let {ncols, nrows} = this.props;\r\n    let board = this.state.board;\r\n    let [y, x] = coord.split(\"-\").map(Number);\r\n\r\n     function flipCell(y, x) {\r\n      // if this coord is actually on board, flip it\r\n\r\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\r\n        board[y][x] = !board[y][x];\r\n      }\r\n    }\r\n\r\n    // TODO: flip this cell and the cells around it\r\n\r\n    let curState = {...this.state};\r\n\r\n    this.setState({\r\n\r\n    })\r\n    // win when every cell is turned off\r\n    // TODO: determine is the game has been won\r\n\r\n    //this.setState({board, hasWon});\r\n  }\r\n\r\n\r\n  /** Render game board or winning message. */\r\n\r\n  render() {\r\n    return(\r\n      <table className=\"Board\">\r\n        <tbody>\r\n          {this.state.board.map((i, y) =>\r\n            <tr key={y}>\r\n              {i.map((j, x) => \r\n                  <Cell \r\n                    key={`${y}-${x}`}\r\n                    flipCellsAround={this.flipCellsAround}\r\n                    isLit={this.state.board[y][x]}\r\n                  />)} \r\n            </tr>)\r\n          }\r\n        </tbody>\r\n      </table>\r\n    )\r\n    // if the game is won, just show a winning msg & render nothing else\r\n\r\n    // TODO\r\n\r\n    // make table board\r\n\r\n    // TODO\r\n  }\r\n}\r\n\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}