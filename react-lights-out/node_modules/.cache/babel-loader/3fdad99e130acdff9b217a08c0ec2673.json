{"ast":null,"code":"import _slicedToArray from \"D:\\\\Nettisivuja\\\\Udemy kusrssit\\\\React\\\\react-lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"D:\\\\Nettisivuja\\\\Udemy kusrssit\\\\React\\\\react-lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Nettisivuja\\\\Udemy kusrssit\\\\React\\\\react-lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Nettisivuja\\\\Udemy kusrssit\\\\React\\\\react-lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Nettisivuja\\\\Udemy kusrssit\\\\React\\\\react-lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Nettisivuja\\\\Udemy kusrssit\\\\React\\\\react-lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\Nettisivuja\\\\Udemy kusrssit\\\\React\\\\react-lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\Nettisivuja\\\\Udemy kusrssit\\\\React\\\\react-lights-out\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    _this.flipCellsAround = _this.flipCellsAround.bind(_assertThisInitialized(_assertThisInitialized(_this))); // TODO: set initial state\n\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [[false, false, false], [true, true, false], [false, false, false]]; // TODO: create array-of-arrays of true/false values\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      //this.setState({board, hasWon});\n\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log(this.state.board);\n      console.log(this.state.board[0]);\n      return React.createElement(\"table\", {\n        className: \"Board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, this.state.board.map(function (i, y) {\n        return React.createElement(\"tr\", {\n          key: y,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, \" \", i.map(function (j, x) {\n          return React.createElement(Cell, {\n            key: \"\".concat(x, \",\").concat(y),\n            flipCellsAroundMe: _this2.flipCell,\n            isLit: _this2.state.board[y][x],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91\n            },\n            __self: this\n          });\n        }), \" \");\n      })); // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  board: [[false, false, false], [true, true, false], [false, false, false]]\n};\nexport default Board;","map":{"version":3,"sources":["D:/Nettisivuja/Udemy kusrssit/React/react-lights-out/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","flipCellsAround","bind","coord","ncols","nrows","split","map","Number","y","x","flipCell","console","log","i","j","defaultProps"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;IA0BMC,K;;;;;AAQJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AAACC,MAAAA,MAAM,EAAE,KAAT;AAAgBC,MAAAA,KAAK,EAAE,MAAKC,WAAL;AAAvB,KAAb;AACA,UAAKC,eAAL,GAAuB,MAAKA,eAAL,CAAqBC,IAArB,uDAAvB,CAHiB,CAIjB;;AAJiB;AAKlB;AAED;;;;;kCAEc;AACZ,UAAIH,KAAK,GAAG,CACV,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CADU,EAEV,CAAC,IAAD,EAAO,IAAP,EAAa,KAAb,CAFU,EAGV,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAHU,CAAZ,CADY,CAMZ;;AACA,aAAOA,KAAP;AACD;AAED;;;;oCAEgBI,K,EAAO;AAAA,wBACA,KAAKP,KADL;AAAA,UAChBQ,KADgB,eAChBA,KADgB;AAAA,UACTC,KADS,eACTA,KADS;AAErB,UAAIN,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAvB;;AAFqB,6BAGRI,KAAK,CAACG,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAHQ;AAAA;AAAA,UAGhBC,CAHgB;AAAA,UAGbC,CAHa;;AAMrB,eAASC,QAAT,CAAkBF,CAAlB,EAAqBC,CAArB,EAAwB;AACtB;AAEA,YAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGN,KAAd,IAAuBK,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGJ,KAAzC,EAAgD;AAC9CN,UAAAA,KAAK,CAACU,CAAD,CAAL,CAASC,CAAT,IAAc,CAACX,KAAK,CAACU,CAAD,CAAL,CAASC,CAAT,CAAf;AACD;AACF,OAZoB,CAcrB;AAEA;AACA;AAEA;;AACD;AAGD;;;;6BAES;AAAA;;AACPE,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKhB,KAAL,CAAWE,KAAvB;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKhB,KAAL,CAAWE,KAAX,CAAiB,CAAjB,CAAZ;AACA,aACE;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKF,KAAL,CAAWE,KAAX,CAAiBQ,GAAjB,CAAqB,UAACO,CAAD,EAAIL,CAAJ;AAAA,eAAU;AAAI,UAAA,GAAG,EAAEA,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAcK,CAAC,CAACP,GAAF,CAAM,UAACQ,CAAD,EAAIL,CAAJ;AAAA,iBAAU,oBAAC,IAAD;AAAM,YAAA,GAAG,YAAKA,CAAL,cAAUD,CAAV,CAAT;AAAwB,YAAA,iBAAiB,EAAE,MAAI,CAACE,QAAhD;AAA0D,YAAA,KAAK,EAAE,MAAI,CAACd,KAAL,CAAWE,KAAX,CAAiBU,CAAjB,EAAoBC,CAApB,CAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAV;AAAA,SAAN,CAAd,MAAV;AAAA,OAArB,CADH,CADF,CAHO,CAQP;AAEA;AAEA;AAEA;AACD;;;;EArEiBjB,S;;AAAdE,K,CACGqB,Y,GAAe;AACpBjB,EAAAA,KAAK,EAAE,CACL,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CADK,EAEL,CAAC,IAAD,EAAO,IAAP,EAAa,KAAb,CAFK,EAGL,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAHK;AADa,C;AAwExB,eAAeJ,KAAf","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    board: [\n      [false, false, false],\n      [true, true, false],\n      [false, false, false]\n    ]\n  }\n  constructor(props) {\n    super(props);\n    this.state = {hasWon: false, board: this.createBoard()};\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n    // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [\n      [false, false, false],\n      [true, true, false],\n      [false, false, false]\n    ];\n    // TODO: create array-of-arrays of true/false values\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    //this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    console.log(this.state.board);\n    console.log(this.state.board[0]);\n    return(\n      <table className=\"Board\">\n        {this.state.board.map((i, y) => <tr key={y}> {i.map((j, x) => <Cell key={`${x},${y}`} flipCellsAroundMe={this.flipCell} isLit={this.state.board[y][x]}/>)} </tr>)}\n      </table>\n    )\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}